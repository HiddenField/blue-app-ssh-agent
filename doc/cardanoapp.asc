Cardano SL application : Common Technical Specifications
=======================================================
Ledger Firmware Team <hello@ledger.fr>
Application version 0.1 - 16th of November 2017
Forked from ledger's SSH/PGP Agent - blue-app-ssh-agent

== 0.1
  - Initial alpha

== 0.1
  - Get public key for BIP32 path
  - Get random public key, or generate based on passed in index
  - Get Cardano SL Wallet Index

== About

This application describes the APDU messages interface to communicate with the Cardano SL application.

The application covers the following functionalities :

  - Retrieve a public key given a BIP 32 path (over Curve25519)
  - Retrieve a public key from a random index at the Cardano SL Address depth,
    i.e. 44'/1815'/[WALLET_INDEX'/0'/[RANDOM_ADDRESS_INDEX]'
  - Retrieve a public key from an inputed address index.
  - Retrieve the derived Wallet Index for this device's current seed.



The application interface can be accessed over HID

== General purpose APDUs

=== GET PUBLIC KEY

==== Description

This command returns the public key for the given BIP 32 path following user confirmation

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*       | *Lc*     | *Le*
|   80  |   02   |  00                |  02        | variable | variable
|==============================================================================================================================

'Input data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Number of BIP 32 derivations to perform (max 10)                                  | 1
| First derivation index (big endian)                                               | 4
| ...                                                                               | 4
| Last derivation index (big endian)                                                | 4
|==============================================================================================================================

'Output data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Public Key length                                                                 | 1
| Uncompressed Public Key                                                           | var
| Chain Code length                                                                 | 32
| Chain Code                                                                        | var
|==============================================================================================================================

=== GET RANDOM PUBLIC KEY & PASSED IN PUBLIC KEY

==== Description

This command returns the public key for a randomly selected BIP 32 path following user confirmation.
The random index is selected in the 4th depth of BIP 32 path, which corresponds to Cardano SL's
Address Index, i.e. 44'/1815'/[WALLET_INDEX]'/0'/[RANDOM_ADDRESS]'

To Pass In an address index that has been derived elsewhere, set the P2 flag to 06, Lc to 4, and add
the address integer to Le.

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*                | *Lc*     |    *Le*
|   80  |   0C   |  00                |  04 - Random        |    0     |       0
|       |        |                    |  06 - Passed In     |    4     | address index
|==============================================================================================================================

'Output data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Public Key length                                                                 | 1
| Uncompressed Public Key                                                           | var
| Chain Code length                                                                 | 32
| Chain Code                                                                        | var
|==============================================================================================================================


=== GET WALLET INDEX

==== Description

This command returns the Wallet Index associated with the current device seed.
i.e. 44'/1815'/[WALLET_INDEX]'

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*                | *Lc*     |    *Le*
|   80  |   0E   |  00                |  00                 |    0     |       0
|==============================================================================================================================

'Output data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Wallet Index length                                                               | 1
| Wallet Index                                                                      | 4 
|==============================================================================================================================



== Transport protocol

=== General transport description

Ledger APDUs requests and responses are encapsulated using a flexible protocol allowing to fragment large payloads over different underlying transport mechanisms.

The common transport header is defined as follows :

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Communication channel ID (big endian)                                             | 2
| Command tag                                                                       | 1
| Packet sequence index (big endian)                                                | 2
| Payload                                                                           | var
|==============================================================================================================================

The Communication channel ID allows commands multiplexing over the same physical link. It is not used for the time being, and should be set to 0101 to avoid compatibility issues with implementations ignoring a leading 00 byte.

The Command tag describes the message content. Use TAG_APDU (0x05) for standard APDU payloads, or TAG_PING (0x02) for a simple link test.

The Packet sequence index describes the current sequence for fragmented payloads. The first fragment index is 0x00.

=== APDU Command payload encoding

APDU Command payloads are encoded as follows :

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| APDU length (big endian)                                                          | 2
| APDU CLA                                                                          | 1
| APDU INS                                                                          | 1
| APDU P1                                                                           | 1
| APDU P2                                                                           | 1
| APDU length                                                                       | 1
| Optional APDU data                                                                | var
|==============================================================================================================================

APDU payload is encoded according to the APDU case

[width="80%"]
|=======================================================================================
| Case Number  | *Lc* | *Le* | Case description
|   1          |  0   |  0   | No data in either direction - L is set to 00
|   2          |  0   |  !0  | Input Data present, no Output Data - L is set to Lc
|   3          |  !0  |  0   | Output Data present, no Input Data - L is set to Le
|   4          |  !0  |  !0  | Both Input and Output Data are present - L is set to Lc
|=======================================================================================

=== APDU Response payload encoding

APDU Response payloads are encoded as follows :

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| APDU response length (big endian)                                                 | 2
| APDU response data and Status Word                                                | var
|==============================================================================================================================

=== USB mapping

Messages are exchanged with the dongle over HID endpoints over interrupt transfers, with each chunk being 64 bytes long. The HID Report ID is ignored.

== Status Words

The following standard Status Words are returned for all APDUs - some specific Status Words can be used for specific commands and are mentioned in the command description.

'Status Words'

[width="80%"]
|===============================================================================================
|   *SW*   | *Description*
|   6700   | Incorrect length
|   6982   | Security status not satisfied (Canceled by user)
|   6A80   | Invalid data
|   6B00   | Incorrect parameter P1 or P2
|   6Fxx   | Technical problem (Internal error, please report)
|   9000   | Normal ending of the command
|================================================================================================
